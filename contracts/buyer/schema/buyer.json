{
  "contract_name": "buyer",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "hydrogen_contract"
    ],
    "properties": {
      "hydrogen_contract": {
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Buys a container of hydrogen with specified id",
        "type": "object",
        "required": [
          "buy"
        ],
        "properties": {
          "buy": {
            "type": "object",
            "required": [
              "container_id",
              "coordinates",
              "destination"
            ],
            "properties": {
              "container_id": {
                "description": "Id of the container to buy",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "coordinates": {
                "description": "Coordinates of final destination",
                "allOf": [
                  {
                    "$ref": "#/definitions/Coordinates"
                  }
                ]
              },
              "destination": {
                "description": "Destination of the shipment",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Allows to update address of hydrogen contract",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "required": [
              "new_hydrogen_address"
            ],
            "properties": {
              "new_hydrogen_address": {
                "description": "Address of hydrogen contract",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Coordinates": {
        "type": "object",
        "required": [
          "latitude",
          "longtitude"
        ],
        "properties": {
          "latitude": {
            "$ref": "#/definitions/Decimal"
          },
          "longtitude": {
            "$ref": "#/definitions/Decimal"
          }
        }
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Returns current configuration",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns all containers of hydrogen belonging to that sender",
        "type": "object",
        "required": [
          "containers"
        ],
        "properties": {
          "containers": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "description": "Address of hydrogen contract",
          "allOf": [
            {
              "$ref": "#/definitions/Config"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Config": {
          "type": "object",
          "required": [
            "hydrogen_contract"
          ],
          "properties": {
            "hydrogen_contract": {
              "description": "Address of hydrogen contract",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            }
          }
        }
      }
    },
    "containers": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContainersResponse",
      "type": "object",
      "required": [
        "containers"
      ],
      "properties": {
        "containers": {
          "description": "List of all containers of this producer",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerResponse"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "ColorSpectrum": {
          "type": "string",
          "enum": [
            "GREEN",
            "YELLOW",
            "BLUE",
            "WHITE",
            "BLACK"
          ]
        },
        "ContainerResponse": {
          "type": "object",
          "required": [
            "color_spectrum",
            "container_id",
            "owner",
            "price",
            "status",
            "volume"
          ],
          "properties": {
            "color_spectrum": {
              "description": "Color from color spectrum of hydrogen",
              "allOf": [
                {
                  "$ref": "#/definitions/ColorSpectrum"
                }
              ]
            },
            "container_id": {
              "description": "Container ID",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "owner": {
              "description": "Address of current owner",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            },
            "price": {
              "description": "Price of whole container",
              "allOf": [
                {
                  "$ref": "#/definitions/Coin"
                }
              ]
            },
            "status": {
              "description": "Current status of container",
              "allOf": [
                {
                  "$ref": "#/definitions/Status"
                }
              ]
            },
            "volume": {
              "description": "Quantity in cubic meters",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Coordinates": {
          "type": "object",
          "required": [
            "latitude",
            "longtitude"
          ],
          "properties": {
            "latitude": {
              "$ref": "#/definitions/Decimal"
            },
            "longtitude": {
              "$ref": "#/definitions/Decimal"
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "ShipmentDetails": {
          "type": "object",
          "required": [
            "buyer",
            "coordinates",
            "destination"
          ],
          "properties": {
            "buyer": {
              "description": "Address of buyer, to whom ownership will be transferred after delivery",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            },
            "coordinates": {
              "description": "Coordinates of final destination",
              "allOf": [
                {
                  "$ref": "#/definitions/Coordinates"
                }
              ]
            },
            "destination": {
              "description": "Destination of the shipment",
              "type": "string"
            }
          }
        },
        "Status": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Created",
                "Delivered"
              ]
            },
            {
              "type": "object",
              "required": [
                "Shipped"
              ],
              "properties": {
                "Shipped": {
                  "$ref": "#/definitions/ShipmentDetails"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
